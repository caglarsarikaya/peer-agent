version: '3.8'

services:
  # MongoDB service
  mongo:
    image: mongo:5.0
    container_name: peer-agent-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-adminpassword}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-peer_agent_db}
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    networks:
      - peer-agent-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  # FastAPI application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: peer-agent-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - .env.docker
    environment:
      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-3.5-turbo}
      OPENAI_MAX_TOKENS: ${OPENAI_MAX_TOKENS:-1500}
      OPENAI_TEMPERATURE: ${OPENAI_TEMPERATURE:-0.7}
      
      # Search API Configuration
      SERPAPI_KEY: ${SERPAPI_KEY:-}
      SEARCH_ENGINE: ${SEARCH_ENGINE:-serpapi}
      
      # MongoDB Configuration (updated for Docker)
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-adminpassword}@mongo:27017/${MONGODB_DATABASE:-peer_agent_db}?authSource=admin
      MONGODB_DATABASE: ${MONGODB_DATABASE:-peer_agent_db}
      MONGODB_COLLECTION: ${MONGODB_COLLECTION:-interactions}
      
      # FastAPI Configuration
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
      API_DEBUG: ${API_DEBUG:-False}
      
      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: ${LOG_FORMAT:-%(asctime)s - %(name)s - %(levelname)s - %(message)s}
      
      # Agent Configuration
      MAX_SEARCH_RESULTS: ${MAX_SEARCH_RESULTS:-5}
      CONTENT_AGENT_ENABLED: ${CONTENT_AGENT_ENABLED:-True}
      CODE_AGENT_ENABLED: ${CODE_AGENT_ENABLED:-True}
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - peer-agent-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

# Named volumes for data persistence
volumes:
  mongo_data:
    driver: local
  mongo_config:
    driver: local

# Custom network for service communication
networks:
  peer-agent-network:
    driver: bridge 